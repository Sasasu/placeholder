// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct PackageShard {
    // message fields
    pub ttl: u32,
    pub package: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PackageShard {
    pub fn new() -> PackageShard {
        ::std::default::Default::default()
    }

    // uint32 ttl = 1;

    pub fn clear_ttl(&mut self) {
        self.ttl = 0;
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: u32) {
        self.ttl = v;
    }

    pub fn get_ttl(&self) -> u32 {
        self.ttl
    }

    // bytes package = 2;

    pub fn clear_package(&mut self) {
        self.package.clear();
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: ::std::vec::Vec<u8>) {
        self.package = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.package
    }

    // Take field
    pub fn take_package(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.package, ::std::vec::Vec::new())
    }

    pub fn get_package(&self) -> &[u8] {
        &self.package
    }
}

impl ::protobuf::Message for PackageShard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ttl = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.package)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ttl != 0 {
            my_size += ::protobuf::rt::value_size(1, self.ttl, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.package.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.package);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.ttl != 0 {
            os.write_uint32(1, self.ttl)?;
        }
        if !self.package.is_empty() {
            os.write_bytes(2, &self.package)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PackageShard {
        PackageShard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "ttl",
                    |m: &PackageShard| { &m.ttl },
                    |m: &mut PackageShard| { &mut m.ttl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "package",
                    |m: &PackageShard| { &m.package },
                    |m: &mut PackageShard| { &mut m.package },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PackageShard>(
                    "PackageShard",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PackageShard {
        static mut instance: ::protobuf::lazy::Lazy<PackageShard> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PackageShard,
        };
        unsafe {
            instance.get(PackageShard::new)
        }
    }
}

impl ::protobuf::Clear for PackageShard {
    fn clear(&mut self) {
        self.clear_ttl();
        self.clear_package();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PackageShard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PackageShard {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddNode {
    // message fields
    pub sub_net_v4: ::std::vec::Vec<u8>,
    pub net_mask_v4: u32,
    pub sub_net_v6: ::std::vec::Vec<u8>,
    pub net_mask_v6: u32,
    pub name: ::std::string::String,
    pub jump: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AddNode {
    pub fn new() -> AddNode {
        ::std::default::Default::default()
    }

    // bytes sub_net_v4 = 1;

    pub fn clear_sub_net_v4(&mut self) {
        self.sub_net_v4.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_net_v4(&mut self, v: ::std::vec::Vec<u8>) {
        self.sub_net_v4 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_net_v4(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sub_net_v4
    }

    // Take field
    pub fn take_sub_net_v4(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sub_net_v4, ::std::vec::Vec::new())
    }

    pub fn get_sub_net_v4(&self) -> &[u8] {
        &self.sub_net_v4
    }

    // uint32 net_mask_v4 = 2;

    pub fn clear_net_mask_v4(&mut self) {
        self.net_mask_v4 = 0;
    }

    // Param is passed by value, moved
    pub fn set_net_mask_v4(&mut self, v: u32) {
        self.net_mask_v4 = v;
    }

    pub fn get_net_mask_v4(&self) -> u32 {
        self.net_mask_v4
    }

    // bytes sub_net_v6 = 3;

    pub fn clear_sub_net_v6(&mut self) {
        self.sub_net_v6.clear();
    }

    // Param is passed by value, moved
    pub fn set_sub_net_v6(&mut self, v: ::std::vec::Vec<u8>) {
        self.sub_net_v6 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sub_net_v6(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sub_net_v6
    }

    // Take field
    pub fn take_sub_net_v6(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sub_net_v6, ::std::vec::Vec::new())
    }

    pub fn get_sub_net_v6(&self) -> &[u8] {
        &self.sub_net_v6
    }

    // uint32 net_mask_v6 = 4;

    pub fn clear_net_mask_v6(&mut self) {
        self.net_mask_v6 = 0;
    }

    // Param is passed by value, moved
    pub fn set_net_mask_v6(&mut self, v: u32) {
        self.net_mask_v6 = v;
    }

    pub fn get_net_mask_v6(&self) -> u32 {
        self.net_mask_v6
    }

    // string name = 5;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // int32 jump = 6;

    pub fn clear_jump(&mut self) {
        self.jump = 0;
    }

    // Param is passed by value, moved
    pub fn set_jump(&mut self, v: i32) {
        self.jump = v;
    }

    pub fn get_jump(&self) -> i32 {
        self.jump
    }
}

impl ::protobuf::Message for AddNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sub_net_v4)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.net_mask_v4 = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sub_net_v6)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.net_mask_v6 = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.jump = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sub_net_v4.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sub_net_v4);
        }
        if self.net_mask_v4 != 0 {
            my_size += ::protobuf::rt::value_size(2, self.net_mask_v4, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sub_net_v6.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.sub_net_v6);
        }
        if self.net_mask_v6 != 0 {
            my_size += ::protobuf::rt::value_size(4, self.net_mask_v6, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if self.jump != 0 {
            my_size += ::protobuf::rt::value_size(6, self.jump, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.sub_net_v4.is_empty() {
            os.write_bytes(1, &self.sub_net_v4)?;
        }
        if self.net_mask_v4 != 0 {
            os.write_uint32(2, self.net_mask_v4)?;
        }
        if !self.sub_net_v6.is_empty() {
            os.write_bytes(3, &self.sub_net_v6)?;
        }
        if self.net_mask_v6 != 0 {
            os.write_uint32(4, self.net_mask_v6)?;
        }
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if self.jump != 0 {
            os.write_int32(6, self.jump)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddNode {
        AddNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sub_net_v4",
                    |m: &AddNode| { &m.sub_net_v4 },
                    |m: &mut AddNode| { &mut m.sub_net_v4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "net_mask_v4",
                    |m: &AddNode| { &m.net_mask_v4 },
                    |m: &mut AddNode| { &mut m.net_mask_v4 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sub_net_v6",
                    |m: &AddNode| { &m.sub_net_v6 },
                    |m: &mut AddNode| { &mut m.sub_net_v6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "net_mask_v6",
                    |m: &AddNode| { &m.net_mask_v6 },
                    |m: &mut AddNode| { &mut m.net_mask_v6 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &AddNode| { &m.name },
                    |m: &mut AddNode| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "jump",
                    |m: &AddNode| { &m.jump },
                    |m: &mut AddNode| { &mut m.jump },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddNode>(
                    "AddNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddNode {
        static mut instance: ::protobuf::lazy::Lazy<AddNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddNode,
        };
        unsafe {
            instance.get(AddNode::new)
        }
    }
}

impl ::protobuf::Clear for AddNode {
    fn clear(&mut self) {
        self.clear_sub_net_v4();
        self.clear_net_mask_v4();
        self.clear_sub_net_v6();
        self.clear_net_mask_v6();
        self.clear_name();
        self.clear_jump();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddNodeRequest {
    // message fields
    pub nodes: ::protobuf::RepeatedField<AddNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AddNodeRequest {
    pub fn new() -> AddNodeRequest {
        ::std::default::Default::default()
    }

    // repeated .AddNode nodes = 1;

    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<AddNode>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<AddNode> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<AddNode> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }

    pub fn get_nodes(&self) -> &[AddNode] {
        &self.nodes
    }
}

impl ::protobuf::Message for AddNodeRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddNodeRequest {
        AddNodeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AddNode>>(
                    "nodes",
                    |m: &AddNodeRequest| { &m.nodes },
                    |m: &mut AddNodeRequest| { &mut m.nodes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddNodeRequest>(
                    "AddNodeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddNodeRequest {
        static mut instance: ::protobuf::lazy::Lazy<AddNodeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddNodeRequest,
        };
        unsafe {
            instance.get(AddNodeRequest::new)
        }
    }
}

impl ::protobuf::Clear for AddNodeRequest {
    fn clear(&mut self) {
        self.clear_nodes();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddNodeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddNodeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DelNodeRequest {
    // message fields
    pub nodes: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DelNodeRequest {
    pub fn new() -> DelNodeRequest {
        ::std::default::Default::default()
    }

    // repeated string nodes = 1;

    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }

    pub fn get_nodes(&self) -> &[::std::string::String] {
        &self.nodes
    }
}

impl ::protobuf::Message for DelNodeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodes {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodes {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DelNodeRequest {
        DelNodeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nodes",
                    |m: &DelNodeRequest| { &m.nodes },
                    |m: &mut DelNodeRequest| { &mut m.nodes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DelNodeRequest>(
                    "DelNodeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DelNodeRequest {
        static mut instance: ::protobuf::lazy::Lazy<DelNodeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DelNodeRequest,
        };
        unsafe {
            instance.get(DelNodeRequest::new)
        }
    }
}

impl ::protobuf::Clear for DelNodeRequest {
    fn clear(&mut self) {
        self.clear_nodes();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DelNodeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelNodeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingPong {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PingPong {
    pub fn new() -> PingPong {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }
}

impl ::protobuf::Message for PingPong {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingPong {
        PingPong::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &PingPong| { &m.name },
                    |m: &mut PingPong| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PingPong>(
                    "PingPong",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PingPong {
        static mut instance: ::protobuf::lazy::Lazy<PingPong> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PingPong,
        };
        unsafe {
            instance.get(PingPong::new)
        }
    }
}

impl ::protobuf::Clear for PingPong {
    fn clear(&mut self) {
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingPong {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingPong {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Payload {
    // message oneof groups
    pub payload: ::std::option::Option<Payload_oneof_payload>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Payload_oneof_payload {
    package(PackageShard),
    add_node(AddNodeRequest),
    del_node(DelNodeRequest),
    ping(PingPong),
}

impl Payload {
    pub fn new() -> Payload {
        ::std::default::Default::default()
    }

    // .PackageShard package = 1;

    pub fn clear_package(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_package(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::package(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: PackageShard) {
        self.payload = ::std::option::Option::Some(Payload_oneof_payload::package(v))
    }

    // Mutable pointer to the field.
    pub fn mut_package(&mut self) -> &mut PackageShard {
        if let ::std::option::Option::Some(Payload_oneof_payload::package(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(Payload_oneof_payload::package(PackageShard::new()));
        }
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::package(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_package(&mut self) -> PackageShard {
        if self.has_package() {
            match self.payload.take() {
                ::std::option::Option::Some(Payload_oneof_payload::package(v)) => v,
                _ => panic!(),
            }
        } else {
            PackageShard::new()
        }
    }

    pub fn get_package(&self) -> &PackageShard {
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::package(ref v)) => v,
            _ => PackageShard::default_instance(),
        }
    }

    // .AddNodeRequest add_node = 3;

    pub fn clear_add_node(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_add_node(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::add_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_node(&mut self, v: AddNodeRequest) {
        self.payload = ::std::option::Option::Some(Payload_oneof_payload::add_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_node(&mut self) -> &mut AddNodeRequest {
        if let ::std::option::Option::Some(Payload_oneof_payload::add_node(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(Payload_oneof_payload::add_node(AddNodeRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::add_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_node(&mut self) -> AddNodeRequest {
        if self.has_add_node() {
            match self.payload.take() {
                ::std::option::Option::Some(Payload_oneof_payload::add_node(v)) => v,
                _ => panic!(),
            }
        } else {
            AddNodeRequest::new()
        }
    }

    pub fn get_add_node(&self) -> &AddNodeRequest {
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::add_node(ref v)) => v,
            _ => AddNodeRequest::default_instance(),
        }
    }

    // .DelNodeRequest del_node = 4;

    pub fn clear_del_node(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_del_node(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::del_node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_del_node(&mut self, v: DelNodeRequest) {
        self.payload = ::std::option::Option::Some(Payload_oneof_payload::del_node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_del_node(&mut self) -> &mut DelNodeRequest {
        if let ::std::option::Option::Some(Payload_oneof_payload::del_node(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(Payload_oneof_payload::del_node(DelNodeRequest::new()));
        }
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::del_node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_del_node(&mut self) -> DelNodeRequest {
        if self.has_del_node() {
            match self.payload.take() {
                ::std::option::Option::Some(Payload_oneof_payload::del_node(v)) => v,
                _ => panic!(),
            }
        } else {
            DelNodeRequest::new()
        }
    }

    pub fn get_del_node(&self) -> &DelNodeRequest {
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::del_node(ref v)) => v,
            _ => DelNodeRequest::default_instance(),
        }
    }

    // .PingPong ping = 7;

    pub fn clear_ping(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_ping(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::ping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ping(&mut self, v: PingPong) {
        self.payload = ::std::option::Option::Some(Payload_oneof_payload::ping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ping(&mut self) -> &mut PingPong {
        if let ::std::option::Option::Some(Payload_oneof_payload::ping(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(Payload_oneof_payload::ping(PingPong::new()));
        }
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::ping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ping(&mut self) -> PingPong {
        if self.has_ping() {
            match self.payload.take() {
                ::std::option::Option::Some(Payload_oneof_payload::ping(v)) => v,
                _ => panic!(),
            }
        } else {
            PingPong::new()
        }
    }

    pub fn get_ping(&self) -> &PingPong {
        match self.payload {
            ::std::option::Option::Some(Payload_oneof_payload::ping(ref v)) => v,
            _ => PingPong::default_instance(),
        }
    }
}

impl ::protobuf::Message for Payload {
    fn is_initialized(&self) -> bool {
        if let Some(Payload_oneof_payload::package(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Payload_oneof_payload::add_node(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Payload_oneof_payload::del_node(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Payload_oneof_payload::ping(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(Payload_oneof_payload::package(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(Payload_oneof_payload::add_node(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(Payload_oneof_payload::del_node(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(Payload_oneof_payload::ping(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &Payload_oneof_payload::package(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Payload_oneof_payload::add_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Payload_oneof_payload::del_node(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Payload_oneof_payload::ping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &Payload_oneof_payload::package(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Payload_oneof_payload::add_node(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Payload_oneof_payload::del_node(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Payload_oneof_payload::ping(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Payload {
        Payload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PackageShard>(
                    "package",
                    Payload::has_package,
                    Payload::get_package,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AddNodeRequest>(
                    "add_node",
                    Payload::has_add_node,
                    Payload::get_add_node,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DelNodeRequest>(
                    "del_node",
                    Payload::has_del_node,
                    Payload::get_del_node,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PingPong>(
                    "ping",
                    Payload::has_ping,
                    Payload::get_ping,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Payload>(
                    "Payload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Payload {
        static mut instance: ::protobuf::lazy::Lazy<Payload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Payload,
        };
        unsafe {
            instance.get(Payload::new)
        }
    }
}

impl ::protobuf::Clear for Payload {
    fn clear(&mut self) {
        self.clear_package();
        self.clear_add_node();
        self.clear_del_node();
        self.clear_ping();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Payload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Payload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ftransport.proto\x12\0\"2\n\x0cPackageShard\x12\r\n\x03ttl\x18\x01\
    \x20\x01(\rB\0\x12\x11\n\x07package\x18\x02\x20\x01(\x0cB\0:\0\"\x85\x01\
    \n\x07AddNode\x12\x14\n\nsub_net_v4\x18\x01\x20\x01(\x0cB\0\x12\x15\n\
    \x0bnet_mask_v4\x18\x02\x20\x01(\rB\0\x12\x14\n\nsub_net_v6\x18\x03\x20\
    \x01(\x0cB\0\x12\x15\n\x0bnet_mask_v6\x18\x04\x20\x01(\rB\0\x12\x0e\n\
    \x04name\x18\x05\x20\x01(\tB\0\x12\x0e\n\x04jump\x18\x06\x20\x01(\x05B\0\
    :\0\"-\n\x0eAddNodeRequest\x12\x19\n\x05nodes\x18\x01\x20\x03(\x0b2\x08.\
    AddNodeB\0:\0\"#\n\x0eDelNodeRequest\x12\x0f\n\x05nodes\x18\x01\x20\x03(\
    \tB\0:\0\"\x1c\n\x08PingPong\x12\x0e\n\x04name\x18\x01\x20\x01(\tB\0:\0\
    \"\xa5\x01\n\x07Payload\x12\"\n\x07package\x18\x01\x20\x01(\x0b2\r.Packa\
    geShardH\0B\0\x12%\n\x08add_node\x18\x03\x20\x01(\x0b2\x0f.AddNodeReques\
    tH\0B\0\x12%\n\x08del_node\x18\x04\x20\x01(\x0b2\x0f.DelNodeRequestH\0B\
    \0\x12\x1b\n\x04ping\x18\x07\x20\x01(\x0b2\t.PingPongH\0B\0B\t\n\x07payl\
    oad:\0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
